import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchProducts, fetchProductsByCategory } from '../../core/services/firestore-requests';

const initialState = {
  list: [],
  status: 'idle'
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchProductsAsync = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const products = await fetchProducts();
    // const productIdsAndNames = products.map(p => `${p.title}: ${p.productId}`);
    // console.log(productIdsAndNames);
    return products;
  }
);

export const fetchProductsByCategoryAsync = createAsyncThunk(
  'products/fetchProductsByCategory',
  async (category) => {
    return fetchProductsByCategory(category);
  }
);

export const productsSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProductsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.list = action.payload;
      })
      .addCase(fetchProductsByCategoryAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchProductsByCategoryAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.list = action.payload;
      });
  },
});

// export const { increment } = productsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectProducts = (state) => state.products.list;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default productsSlice.reducer;
